using System;
using System.Collections.Generic;

namespace Matrix
{
    class Program
    {
        static void Main(string[] args)
        {
            int n, m;
            Console.Write("Введите размер матрицы (n x m): ");
            string[] input = Console.ReadLine().Split(' ');

            if (input.Length != 2 || !int.TryParse(input[0], out n) || !int.TryParse(input[1], out m) || n <= 1 || m <= 1)
            {
                Console.WriteLine("Некорректный ввод. n и m должны быть больше 1.");
                return;
            }

            bool[,] obstacles = Create(n, m);

            long count = Count(n, m, obstacles);

            Console.WriteLine($"Количество возможных путей: {count}");

            List<string> paths = Gener(n, m, obstacles);
            Console.WriteLine("Все возможные маршруты:");
            foreach (string path in paths)
            {
                Console.WriteLine(path);
            }
        }

        static bool[,] Create(int n, int m)
        {
            bool[,] obstacles = new bool[n, m];

            Console.Write("Введите координаты препятствий (x y) (введите 'выход' для завершения ввода): ");
            string input;
            while ((input = Console.ReadLine()) != "выход")
            {
                string[] coords = input.Split(' ');
                if (coords.Length != 2 || !int.TryParse(coords[0], out int x) || !int.TryParse(coords[1], out int y) ||
                    x < 0 || x >= n || y < 0 || y >= m)
                {
                    Console.WriteLine("Некорректные координаты. Введите координаты в формате 'x y'.");
                    continue;
                }
                obstacles[x, y] = true;
            }

            return obstacles;
        }

        static long Count(int n, int m, bool[,] obstacles)
        {
            long[,] dp = new long[n, m];

            dp[0, 0] = !obstacles[0, 0] ? 1 : 0;
            for (int i = 1; i < n; i++)
            {
                dp[i, 0] = !obstacles[i, 0] && dp[i - 1, 0] == 1 ? 1 : 0;
            }
            for (int j = 1; j < m; j++)
            {
                dp[0, j] = !obstacles[0, j] && dp[0, j - 1] == 1 ? 1 : 0;
            }

            for (int i = 1; i < n; i++)
            {
                for (int j = 1; j < m; j++)
                {
                    if (!obstacles[i, j])
                    {
                        dp[i, j] = dp[i - 1, j] + dp[i, j - 1];
                    }
                }
            }

            return dp[n - 1, m - 1];
        }

        static List<string> Gener(int n, int m, bool[,] obstacles)
        {
            List<string> paths = new List<string>();
            Felper(n, m, 0, 0, obstacles, "", paths);
            return paths;
        }

        static void Felper(int n, int m, int i, int j, bool[,] obstacles, string path, List<string> paths)
        {
            if (i == n - 1 && j == m - 1)
            {
                paths.Add(path);
                return;
            }

            if (i < n - 1 && !obstacles[i + 1, j])
            {
                Felper(n, m, i + 1, j, obstacles, path + "вниз ", paths);
            }
            if (j < m - 1 && !obstacles[i, j + 1])
            {
                Felper(n, m, i, j + 1, obstacles, path + "вправо ", paths);
            }
        }
    }
}
